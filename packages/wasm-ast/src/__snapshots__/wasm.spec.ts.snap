// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`interfaces 1`] = `
"export interface SG721ReadOnlyInstance {
  contractAddress: string;
  tokens: (owner: string, startAfter?: string, limit?: string) => Promise<TokensResponse>;
}
export interface SG721Instance extends SG721ReadOnlyInstance {
  contractAddress: string;
  mint: (sender: string, anotherProp: string, prop3: string) => Promise<ExecuteResult>;
}"
`;

exports[`readonly classes 1`] = `
"export class SG721QueryClient implements SG721ReadOnlyInstance {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.approval = this.approval.bind(this);
    this.otherProp = this.otherProp.bind(this);
    this.hello = this.hello.bind(this);
    this.mintme = this.mintme.bind(this);
  }

  approval = async (owner: string, spender: string): Promise<ApprovalResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      owner,
      spender
    });
  };
}"
`;

exports[`top import 1`] = `"import { CosmWasmClient, ExecuteResult, SigningCosmWasmClient } from \\"@cosmjs/cosmwasm-stargate\\";"`;
