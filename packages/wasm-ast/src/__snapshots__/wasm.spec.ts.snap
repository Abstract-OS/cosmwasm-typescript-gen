// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`execute classes 1`] = `
"export class SG721Client extends SG721QueryClient implements SG721Instance {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.contractAddress = contractAddress;
    this.transferNft = this.transferNft.bind(this);
    this.sendNft = this.sendNft.bind(this);
    this.approve = this.approve.bind(this);
    this.revoke = this.revoke.bind(this);
    this.approveAll = this.approveAll.bind(this);
    this.revokeAll = this.revokeAll.bind(this);
    this.mint = this.mint.bind(this);
    this.burn = this.burn.bind(this);
  }

  transferNft = async (recipient?: string, tokenId?: string): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      transfer_nft: {
        recipient,
        token_id: tokenId
      }
    }, \\"auto\\");
  };
  sendNft = async (contract?: string, msg?: BinaryType, tokenId?: string): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      send_nft: {
        contract,
        msg,
        token_id: tokenId
      }
    }, \\"auto\\");
  };
  approve = async (expires?: Expiration, spender?: string, tokenId?: string): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      approve: {
        expires,
        spender,
        token_id: tokenId
      }
    }, \\"auto\\");
  };
  revoke = async (spender?: string, tokenId?: string): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      revoke: {
        spender,
        token_id: tokenId
      }
    }, \\"auto\\");
  };
  approveAll = async (expires?: Expiration, operator?: string): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      approve_all: {
        expires,
        operator
      }
    }, \\"auto\\");
  };
  revokeAll = async (operator?: string): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      revoke_all: {
        operator
      }
    }, \\"auto\\");
  };
  mint = async (): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      mint: {}
    }, \\"auto\\");
  };
  burn = async (tokenId?: string): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      burn: {
        token_id: tokenId
      }
    }, \\"auto\\");
  };
}"
`;

exports[`query classes 1`] = `
"export class SG721QueryClient implements SG721ReadOnlyInstance {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.ownerOf = this.ownerOf.bind(this);
    this.approval = this.approval.bind(this);
    this.approvals = this.approvals.bind(this);
    this.allOperators = this.allOperators.bind(this);
    this.numTokens = this.numTokens.bind(this);
    this.contractInfo = this.contractInfo.bind(this);
    this.nftInfo = this.nftInfo.bind(this);
    this.allNftInfo = this.allNftInfo.bind(this);
    this.tokens = this.tokens.bind(this);
    this.allTokens = this.allTokens.bind(this);
    this.minter = this.minter.bind(this);
    this.collectionInfo = this.collectionInfo.bind(this);
  }

  ownerOf = async (includeExpired?: boolean, tokenId?: string): Promise<OwnerOfResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      owner_of: {
        include_expired: includeExpired,
        token_id: tokenId
      }
    });
  };
  approval = async (includeExpired?: boolean, spender?: string, tokenId?: string): Promise<ApprovalResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      approval: {
        include_expired: includeExpired,
        spender,
        token_id: tokenId
      }
    });
  };
  approvals = async (includeExpired?: boolean, tokenId?: string): Promise<ApprovalsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      approvals: {
        include_expired: includeExpired,
        token_id: tokenId
      }
    });
  };
  allOperators = async (includeExpired?: boolean, limit?: number, owner?: string, startAfter?: string): Promise<AllOperatorsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      all_operators: {
        include_expired: includeExpired,
        limit,
        owner,
        start_after: startAfter
      }
    });
  };
  numTokens = async (): Promise<NumTokensResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      num_tokens: {}
    });
  };
  contractInfo = async (): Promise<ContractInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      contract_info: {}
    });
  };
  nftInfo = async (tokenId?: string): Promise<NftInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      nft_info: {
        token_id: tokenId
      }
    });
  };
  allNftInfo = async (includeExpired?: boolean, tokenId?: string): Promise<AllNftInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      all_nft_info: {
        include_expired: includeExpired,
        token_id: tokenId
      }
    });
  };
  tokens = async (limit?: number, owner?: string, startAfter?: string): Promise<TokensResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      tokens: {
        limit,
        owner,
        start_after: startAfter
      }
    });
  };
  allTokens = async (limit?: number, startAfter?: string): Promise<AllTokensResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      all_tokens: {
        limit,
        start_after: startAfter
      }
    });
  };
  minter = async (): Promise<MinterResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      minter: {}
    });
  };
  collectionInfo = async (): Promise<CollectionInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      collection_info: {}
    });
  };
}"
`;

exports[`query interfaces 1`] = `
"export interface SG721ReadOnlyInstance {
  contractAddress: string;
  ownerOf: (includeExpired?: boolean, tokenId?: string) => Promise<OwnerOfResponse>;
  approval: (includeExpired?: boolean, spender?: string, tokenId?: string) => Promise<ApprovalResponse>;
  approvals: (includeExpired?: boolean, tokenId?: string) => Promise<ApprovalsResponse>;
  allOperators: (includeExpired?: boolean, limit?: number, owner?: string, startAfter?: string) => Promise<AllOperatorsResponse>;
  numTokens: () => Promise<NumTokensResponse>;
  contractInfo: () => Promise<ContractInfoResponse>;
  nftInfo: (tokenId?: string) => Promise<NftInfoResponse>;
  allNftInfo: (includeExpired?: boolean, tokenId?: string) => Promise<AllNftInfoResponse>;
  tokens: (limit?: number, owner?: string, startAfter?: string) => Promise<TokensResponse>;
  allTokens: (limit?: number, startAfter?: string) => Promise<AllTokensResponse>;
  minter: () => Promise<MinterResponse>;
  collectionInfo: () => Promise<CollectionInfoResponse>;
}"
`;
